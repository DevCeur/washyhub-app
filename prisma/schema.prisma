generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CarwashPackage {
  id          String           @id @default(uuid())
  name        String           @db.VarChar(255)
  description String?
  cost        Decimal
  carwash_id  String
  carwash     Carwash          @relation(fields: [carwash_id], references: [id], onDelete: Cascade)
  services    CarwashService[]
  updated_at  DateTime         @updatedAt
  created_at  DateTime         @default(now())
}

model CarwashService {
  id          String          @id @default(uuid())
  name        String          @db.VarChar(255)
  description String?
  cost        Decimal
  carwash_id  String
  package_id  String?
  carwash     Carwash         @relation(fields: [carwash_id], references: [id], onDelete: Cascade)
  package     CarwashPackage? @relation(fields: [package_id], references: [id], onDelete: Cascade)
  updated_at  DateTime        @updatedAt
  created_at  DateTime        @default(now())
}

model Carwash {
  id         String           @id @default(uuid())
  name       String           @db.VarChar(255)
  owner_id   String
  owner      User             @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  packages   CarwashPackage[]
  services   CarwashService[]
  updated_at DateTime         @updatedAt
  created_at DateTime         @default(now())
}

model PasswordResetToken {
  id          String   @id @default(uuid())
  token       String   @unique
  user_id     String
  expiry_date DateTime
  user        User     @relation(fields: [user_id], references: [id])
  updated_at  DateTime @updatedAt
  created_at  DateTime @default(now())
}

model Profile {
  id         String   @id @default(uuid())
  first_name String   @db.VarChar(255)
  last_name  String   @db.VarChar(255)
  user_id    String   @unique
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
}

model User {
  id                    String               @id @default(uuid())
  email                 String               @unique @db.VarChar(255)
  password              String               @db.VarChar(255)
  needs_onboarding      Boolean              @default(true)
  car_washes            Carwash[]
  password_reset_tokens PasswordResetToken[]
  profile               Profile?
  updated_at            DateTime             @updatedAt
  created_at            DateTime             @default(now())
}
